# Card Battle Game Development Context

## Project Overview
- Unity card battler game (similar to Hearthstone)
- Uses C# with UniTask for async operations
- Advanced prototype stage with core gameplay systems implemented
- 3x3 grid-based gameplay with multiple hero classes
- Turn-based card mechanics with sophisticated battle resolution
- Features visually engaging combat with unit animations (attack shake, death sequence) and precisely sequenced actions.

### Directory Structure
Assets/
├── Game/
│   ├── Materials/
│   ├── Models/
│   ├── Prefabs/
│   ├── Scripts/
│   │   ├── Core/           # Core gameplay and controllers
│   │   ├── Data/           # Data structures and models
│   │   ├── Helpers/        # Utility and helper classes
│   │   ├── Save/           # Save system implementation
│   │   └── UI/             # User interface components (BoardUnit.cs for unit visuals, GameUI.cs for overall UI management)
│   ├── SO/                 # ScriptableObjects for game configuration
│   └── Textures/
├── Input/                  # Input handling
├── Plugins/                # Third-party libraries (DOTween, UniTask, OdinInspector)
├── Resources/              # Runtime loadable assets
├── Scenes/                 # Unity scenes (SampleScene.unity)
├── Settings/               # Project settings
└── Documentation/          # Project documentation (including this file, GameStructure.txt, summaries)

### Key Files and Classes

#### Core Architecture
- `GameInitializer.cs` (Assets/Game/Scripts/Core/GameInitializer.cs)
  - Entry point for game startup with event system
  - Creates GameSession after finding opponent
  - Handles starter deck generation with fallback
  - Supports hero selection (defaults to Warrior)

- `GameSession.cs` (Assets/Game/Scripts/Core/GameSession.cs)
  - Complete game state and flow management
  - Handles turn progression with mana increment (asynchronous card draw and move phases).
  - Coordinates player and bot moves with simultaneous execution.
  - Supports card burning for mana with UI integration
  - Event system for UI updates (OnGameStateUpdated, OnGameEnded)
  - Orchestrates asynchronous combat resolution via BattleResolver.

- `OpponentFinder.cs` (Assets/Game/Scripts/Core/OpponentFinder.cs)
  - Currently has placeholder implementation
  - Path for expansion: Implement actual matchmaking or AI opponent selection logic

- `BattleResolver.cs` (Assets/Game/Scripts/Core/BattleResolver.cs)
  - Complete battle resolution with phased execution
  - Processes card placements with mana cost ordering
  - Executes battle phases (positive effects, negative effects, passive abilities, combat)
  - `CombatEffect` is now highly asynchronous, managing detailed animation timing and visual feedback for combat actions.
  - Advanced game state analysis for AI decision making
  - Win condition checking with draw support

#### Move Controllers (Assets/Game/Scripts/Core/MoveControllers/)
- `BaseMoveController.cs` - Abstract base class with common interface
- `PlayerMoveController.cs` - Human player controls (partially implemented)
- `BotMoveController.cs` - AI opponent controls with game state analysis
- `TestMoveController.cs` - Testing implementation with random selection

#### State Management (Assets/Game/Scripts/Data/Core/State/)
- `GameState.cs` - Top-level game state container
- `PlayerState.cs` - Individual player state
- `BoardState.cs` - 3x3 grid representation
- `PlayerCardsState.cs` - Card collection management with deck operations
- `HeroState.cs` - Player health and mana with event system
- `UnitState.cs` - Unit health, damage, and skills

#### Card System (Assets/Game/Scripts/Data/)
- `CardLevel.cs` (Assets/Game/Scripts/Data/Saves/CardLevel.cs) - Enhanced card representation with mana cost calculation
- `CardSave.cs` (Assets/Game/Scripts/Data/Saves/CardSave.cs) - Card with quantity for collections
- `CardMove.cs` (Assets/Game/Scripts/Data/Core/Move/CardMove.cs) - Card placement on board
- `PlayerMove.cs` (Assets/Game/Scripts/Data/Core/Move/PlayerMove.cs) - Collection of card moves with burned card support

#### Hero System
- `HeroSave.cs` (Assets/Game/Scripts/Data/Saves/HeroSave.cs) - Hero progression data
- `HeroData.cs` (Assets/Game/Scripts/Data/Static/HeroData.cs) - Static hero configuration
- `HeroMagicSave.cs` (Assets/Game/Scripts/Data/Saves/HeroMagicSave.cs) - Hero magic abilities
- `HeroMagicData.cs` (Assets/Game/Scripts/Data/Static/HeroMagicData.cs) - Static hero magic data

#### Board System
- `GameBoardPlace.cs` (Assets/Game/Scripts/Data/Core/GameBoardPlace.cs) - Single board position
  - Handles unit placement, death, and revival
  - Manages place markings

#### Card Effect System (Assets/Game/Scripts/Data/Core/Effects/)
- `BaseCardEffect.cs` - Abstract base class for all effects
- `ICardEffect.cs` - Interface defining effect contract
- `CardEffectFactory.cs` - Creates appropriate effects based on card type with skill support
- Specific Effects:
  - `AntiMagicEffect.cs` - Protection against magic
  - `ArmorEffect.cs` - Damage reduction
  - `CombatEffect.cs` - Manages detailed turn-based combat logic with sequenced attacks.
    - Handles FirstStrike, regular unit attacks by pairing units from opposing lines (first unit vs first, second vs second, etc.).
    - Units find the closest living target in their line; attack hero if no unit target.
    - Integrates with `GameUI` to trigger attack and death animations for `BoardUnit` instances.
    - Uses UniTask for asynchronous combat flow, including pauses (e.g., `UniTask.DelayFrame`) for visual clarity.
    - Supports simultaneous animations (attack and death) for paired unit interactions using `UniTask.WhenAll`.
    - Manages skills like Vampirism and DoubleDamage during combat resolution.
    - Ensures units are immediately marked as dead and their visual representations are removed from UI tracking to prevent re-targeting.
  - `DamageEffect.cs` - Direct damage with anti-magic checking
  - `DoubleDamageEffect.cs` - Damage multiplier
  - `EndTurnHealEffect.cs` - End of turn healing
  - `FirstStrikeEffect.cs` - Attack first in combat
  - `PlaceUnitEffect.cs` - Unit placement with validation
  - `VampirismEffect.cs` - Health drain
  - `NoEffect.cs` - Placeholder for no effect

#### UI System (Assets/Game/Scripts/UI/)
- `GameUI.cs` (Assets/Game/Scripts/UI/GameUI.cs) - Manages overall game UI, including card hand and board representation.
  - Provides a static `Instance` for easy access from other systems (e.g., `CombatEffect`). Cleans up instance on destroy.
  - `GetBoardUnit(playerIndex, line, row)`: Retrieves the `BoardUnit` visual for a specific unit, handling player index to board position mapping.
  - `RemoveBoardUnit(BoardUnit)`: Immediately removes a `BoardUnit` from its tracking dictionary, typically upon death, to prevent re-targeting.
- `BoardUnit.cs` (Assets/Game/Scripts/UI/Board/BoardUnit.cs) - Visual and animation controller for individual units on the board.
  - Handles unit-specific animations like spawn, attack (DOTween shake), death (DOTween scale/rotate).
  - `PlayAttackAnimation()` and `PlayDeathAnimation()` are asynchronous (`UniTask`) and return UniTask to allow sequencing and simultaneous execution via `UniTask.WhenAll`.

#### Helper Classes (Assets/Game/Scripts/Helpers/)
- `StaticDataService.cs` - Centralized service with caching for accessing all static game data
- `CardGenerator.cs` - Generates card decks and individual cards
- `GameUIHelper.cs` - Helpers for game UI operations
- `SaveService.cs` - Complete save management with PlayerPrefs integration
- `VisualService.cs` - Handles visual data for cards and other game elements

#### Save System (Assets/Game/Scripts/Save/)
- `SaveableScriptableObject.cs` - Base class for saveable ScriptableObjects with JSON serialization
- `SaveDataInitializer.cs` - Initialization helper for save data
- `SaveData.cs` - Main save data container ScriptableObject

#### Enums (Assets/Game/Scripts/Data/Enums/)
- `CardId.cs`, `CardTypeId.cs`, `ClassId.cs`, `HeroId.cs`, `HeroMagicId.cs`, `MagicId.cs`, `MagicTypeId.cs`, `PlaceMarkId.cs`, `RaceId.cs`, `RarityId.cs`, `SkillId.cs`, `UnitId.cs` - Comprehensive set of enums for game data identification.

#### Visual System (Assets/Game/Scripts/Data/Visual/)
- `VisualStaticData.cs` - Central visual data container
- `CardVisual.cs`, `HeroVisual.cs`, `HeroMagicVisual.cs`, `UnitVisual.cs`, `UnitCardVisual.cs`, `MagicCardVisual.cs` - Specific visual data classes.

#### Static Data System (Assets/Game/Scripts/Data/Static/)
- `StaticData.cs` - Main static data container ScriptableObject
- `CardStaticData.cs`, `HeroData.cs`, `HeroMagicData.cs`, `UnitStaticData.cs`, `UnitStaticLevelData.cs` - Specific static data configuration classes.

## Technical Considerations

### Design Patterns
- **MVC Pattern**: Separation of game state (model), controllers (MoveControllers), and view (UI)
- **Command Pattern**: Move actions are encapsulated as data objects
- **Strategy Pattern**: Card effects use polymorphism via the ICardEffect interface
- **Factory Pattern**: CardEffectFactory creates appropriate effects based on card type
- **Dependency Injection**: Components are provided through constructors
- **Observer Pattern**: Event system for state changes and UI updates
- **Service Locator**: StaticDataService and SaveService provide centralized access
- **Singleton-like access**: `GameUI.Instance` for UI components, ensuring controlled global access.

### Async Programming
- Extensive use of UniTask for asynchronous operations throughout the game, especially in `GameSession` and `CombatEffect`.
- Card selection, moves, and combat resolution are handled asynchronously.
- Allows for UI interaction and smooth animations during gameplay without blocking the main thread.
- Simultaneous player move execution.
- Sophisticated management of animation sequences and pauses using `UniTask.DelayFrame` and `UniTask.WhenAll` for simultaneous attack and death animations.

### Data Flow
1. `GameInitializer` creates `GameSession` with player data.
2. `GameSession` initializes controllers and game state.
3. Initial card selection phase via `ChooseCards` method (asynchronous).
4. Turn progression through `DoTurn` method with mana increment and card draw (asynchronous).
5. `MoveControllers` determine actions simultaneously.
6. `BattleResolver` processes actions in proper phase order. `CombatEffect` handles detailed combat sequence with animations.
7. Effects are applied with position-based and skill-based logic. Combat involves calls to `GameUI` for animations (attack, death).
8. Win conditions are checked with comprehensive game state analysis.

### Save System
- ScriptableObject-based save system with JSON serialization
- PlayerPrefs integration for persistence
- Cached access for performance
- Default value fallbacks

## Implementation Status

### Completed Components
- Complete class structure and relationships
- State management classes with event system
- Card and board data structures
- Initial card drawing workflow (asynchronous)
- Complete card effect system implementation
- Battle resolution with sophisticated phased execution and animated combat (simultaneous attacks/deaths, sequenced actions with pauses).
- Win condition checking with draw support
- Card burning for mana gain
- Hero system with multiple classes
- Save/load system with caching
- Static data management with performance optimization
- Visual data system
- Basic unit combat animations (attack shake, death sequence using DOTween) integrated into the asynchronous combat flow.

### Partially Implemented
- Player input handling for moves
- AI decision making (basic implementation exists)
- Game state analysis system (implemented but can be enhanced)
- UI components for cards and board (basic `BoardUnit` and `GameUI` infrastructure exists, but full UI for hand, drag-drop, etc., is pending).

### Missing/TODO Components
- Advanced UI components for cards (hand display, drag-drop for card placement) and board interaction.
- Animations for *spell* card effects (current animation system focuses on unit combat).
- Proper matchmaking implementation in `OpponentFinder.cs`.
- Deck building interface.
- Hero magic system completion (effects and UI integration).
- Server/multiplayer functionality (directory exists but empty).

## Extension Points

### High Priority Implementation Tasks
1. Implement full UI components for game board interaction and card hand management (drag-drop, card selection).
2. Add animations for spell card effects.
3. Complete the player input handling system in `PlayerMoveController.cs`.
4. Improve AI decision making in `BotMoveController.cs`.
5. Implement proper matchmaking in `OpponentFinder.cs`.

### Architecture Extension Points
1. Extend the hero magic system with UI and effect implementations.
2. Implement position-based board effects (foundation exists).
3. Add multiplayer networking capability (Server directory ready).
4. Create deck builder with card collection management UI.
5. Implement advanced AI with more nuanced game state analysis.

## Coding Conventions
- PascalCase for public members and types
- _camelCase with underscore prefix for private fields
- Namespace structure follows directory structure: Game.Scripts.[Category]
- Abstract classes prefixed with "Base" (e.g., `BaseMoveController`)
- Events follow C# standard naming (e.g., `OnGameStateUpdated`)
- Extensive use of caching for performance
- Consistent use of UniTask for all asynchronous operations.

## Dependencies
- UniTask library for async/await pattern
- Unity core systems
- DOTween for animations (used in `BoardUnit.cs`)
- Sirenix.OdinInspector for editor tools (optional, primarily for development workflow)
- ScriptableObjects for data configuration
- PlayerPrefs for save persistence

## Testing Approach
- `TestMoveController` provides basis for automated testing of game logic.
- `BattleResolver` includes comprehensive game state analysis capabilities.
- Save system with fallback mechanisms ensures data integrity.
- Default value handling throughout the system for robustness.
- Manual testing through Unity Editor play mode is crucial, especially for visual elements like animations and UI feedback.

## Current Architecture Strengths
1. Complete and sophisticated battle resolution system with phased execution.
2. Advanced AI game state analysis capabilities.
3. Event-driven architecture facilitating UI integration and modularity.
4. Comprehensive save system with caching and persistence.
5. Flexible and extensible card effect system using the factory pattern.
6. Support for multiple hero classes and future expansion.
7. Performance-optimized static data access through a centralized service.
8. Visually engaging and understandable combat flow due to the integration of unit animations (attack, death) and precisely sequenced actions managed by an asynchronous system (UniTask, DOTween).
9. Clear separation of concerns between game logic (`CombatEffect`), UI presentation (`GameUI`, `BoardUnit`), and data state.

## Next Development Steps
1. Implement UI components for card display and interaction (hand management, drag-and-drop card placement).
2. Add animations for spell card effects to further enhance visual feedback.
3. Complete the player input handling system for a fully interactive experience.
4. Develop a deck building interface for player customization.
5. Implement hero magic abilities with their respective effects and UI integration.
6. Explore and implement multiplayer/server functionality based on the existing groundwork.
7. Create a comprehensive testing suite covering both logic and UI interactions.
